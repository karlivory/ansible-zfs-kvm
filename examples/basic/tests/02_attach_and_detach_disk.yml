---
# Test 1: attach disk and then check:
#  * domain has new disk in xml
#  * new disk dev is available
#  * changes persist after reboot

- name: Update vm disks var (add disk)
  ansible.builtin.set_fact:
    zk_vm_disks:
      - name: "{{ zk_vm_name }}-root"
        dev: vda
        size: 10G
      - name: "{{ zk_vm_name }}-data"
        dev: vdb
        size: 1G
  when: inventory_hostname in groups['zk-vms']

- ansible.builtin.import_role:
    name: karlivory.zk.build_facts
- ansible.builtin.import_role:
    name: karlivory.zk.provision_vms

- name: Assert domain xml has new disk
  command: virsh dumpxml {{ zk_vm_name }}
  register: vm_xml
  delegate_to: "{{ zk_vm_kvm_hosts }}"
  changed_when: false
  when: inventory_hostname in groups['zk-vms']
- assert:
    that:
      - "'vdb' in vm_xml.stdout"
    fail_msg: "New disk is not present in domain XML"
  when: inventory_hostname in groups['zk-vms']

- name: Assert /dev/vdb is available
  ansible.builtin.command: lsblk -n
  register: lsblk_output
  changed_when: false
  failed_when: "'vdb' not in lsblk_output.stdout"
  when: inventory_hostname in groups['zk-vms']

- name: Reboot vm
  ansible.builtin.reboot:
  become: true
  when: inventory_hostname in groups['zk-vms']

- name: Wait for VM to be reachable after reboot
  ansible.builtin.wait_for_connection:
    delay: 10
    timeout: 120
  when: inventory_hostname in groups['zk-vms']

- name: Assert /dev/vdb is available after reboot
  ansible.builtin.command: lsblk -n
  register: lsblk_output_after_reboot
  changed_when: false
  failed_when: "'vdb' not in lsblk_output_after_reboot.stdout"
  when: inventory_hostname in groups['zk-vms']


# Test 2: remove disk from vars and then check:
#  * disk gets detached (dev not available)
#  * disk is removed from xml
#  * changes persist after reboot

- name: Update vm disks var (remove disk)
  ansible.builtin.set_fact:
    zk_vm_disks:
      - name: "{{ zk_vm_name }}-root"
        dev: vda
        size: 10G
  when: inventory_hostname in groups['zk-vms']

- ansible.builtin.import_role:
    name: karlivory.zk.build_facts
- ansible.builtin.import_role:
    name: karlivory.zk.provision_vms

- name: Assert /dev/vdb does not exist after removal
  ansible.builtin.command: lsblk -n
  register: lsblk_output_after_removal
  changed_when: false
  failed_when: "'vdb' in lsblk_output_after_removal.stdout"
  when: inventory_hostname in groups['zk-vms']

- name: Assert domain xml does not have removed disk
  command: virsh dumpxml {{ zk_vm_name }}
  register: vm_xml_after_removal
  delegate_to: "{{ zk_vm_kvm_hosts }}"
  changed_when: false
  when: inventory_hostname in groups['zk-vms']
- assert:
    that:
      - "'vdb' not in vm_xml_after_removal.stdout"
    fail_msg: "Removed disk is still present in domain XML"
  when: inventory_hostname in groups['zk-vms']

