---
# host: kvm_host
# vars: zk_kvm

- name: Install packages
  become: true
  ansible.builtin.apt:
    pkg:
      - bridge-utils
      - libguestfs-tools
      - libvirt-clients
      - libvirt-daemon
      - libvirt-daemon-system
      - python3
      - python3-libvirt
      - qemu-kvm
      - virtinst

- ansible.builtin.set_fact:
    repository_dir: "{{ zk_kvm.data_dir }}/repository"
    images_dir: "{{ zk_kvm.data_dir }}/golden_images"
    tmp_dir: "{{ zk_kvm.data_dir }}/tmp"

- name: Ensure repository, golden_images and tmp directories exist under data_dir
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ images_dir }}"
    - "{{ repository_dir }}"
    - "{{ tmp_dir }}"

- name: Start async download of base images
  become: true
  ansible.builtin.get_url:
    url: "{{ image.url }}"
    dest: "{{ repository_dir }}/{{ image.name }}.img"
    checksum: "{{ image.checksum }}"
  loop: "{{ zk_kvm.images | list}}"
  loop_control:
    loop_var: image
  async: 600
  poll: 0
  register: download_jobs
  changed_when: false

- name: Wait for base image downloads to complete
  become: true
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: download_jobs_status
  until: download_jobs_status.finished
  loop: "{{ download_jobs.results }}"
  retries: "{{ zk_kvm_image_download_timeout }}"
  delay: 1

- name: Set fact for image changed status
  become: true
  set_fact:
    image_changed_status: "{{ image_changed_status | default({}) | combine({item.image.name: item.changed}) }}"
  loop: "{{ download_jobs.results }}"

- name: Check whether images.json exists
  become: true
  ansible.builtin.stat:
    path: "{{ images_dir }}/images.json"
    get_attributes: false
    get_checksum: false
    get_mime: false
  register: images_stat

- name: Read images.json contents
  become: true
  when: images_stat.stat.exists
  ansible.builtin.slurp:
    src: "{{ images_dir }}/images.json"
  register: images_slurp

- name: Parse images_stat into json
  when: images_stat.stat.exists
  ansible.builtin.set_fact:
    current_images_json: "{{ images_slurp.content | b64decode | from_json }}"

- name: Determine if golden image rebuild is needed
  ansible.builtin.set_fact:
    build_image: >-
      {{
        build_image | default({}) | combine({
          image.name: (
            not images_stat.stat.exists
            or
            (image.name in image_changed_status and image_changed_status[image.name])
            or
            (images_stat.stat.exists and
              (
                (current_images_json | selectattr("name", "equalto", image.name) | list | length == 0)
                or
                (current_images_json | selectattr("name", "equalto", image.name) | list | first != image)
              )
            )
          )
        })
      }}
  loop: "{{ zk_kvm.images }}"
  loop_control:
    loop_var: image

- name: Build golden image
  ansible.builtin.include_tasks: ./build_templates/{{ image.build_template }}.yml
  vars:
    golden_image_path: "{{ images_dir }}/{{ image.name }}.qcow2"
    intermediate_image_path: "{{ tmp_dir }}/{{ image.name }}-intermediate-{{ current_timestamp }}.qcow2"
    base_image_download_path: "{{ repository_dir }}/{{ image.name }}.img"
  loop: "{{ zk_kvm.images }}"
  loop_control:
    loop_var: image
  when: build_image[image.name] | default(false)

- name: Write images.json
  when: (not images_stat.stat.exists) or (current_images_json != zk_kvm.images)
  become: true
  ansible.builtin.copy:
    content: "{{ zk_kvm.images | to_nice_json }}"
    dest: "{{ images_dir }}/images.json"
