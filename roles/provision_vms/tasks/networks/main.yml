---
- name: Detach dangling NICs
  when: vm.prune_dangling_networks
  ansible.builtin.command: virsh detach-interface --domain "{{ vm.name }}" --type "{{ item.nic_type }}" --mac "{{ item.mac }}" --persistent
  loop: "{{ vm_diff.output.dangling_nics }}"

- name: Remove any dangling netplan
  when:
    - vm.networks_netplan_enabled
    - vm.prune_dangling_networks
    - vm_diff.output.dangling_nics | length > 0
  karlivory.zk.qemu_guest_run_cmd:
    domain: "{{ vm.name }}"
    command: |
      #!/bin/bash

      {% for nic in vm_diff.output.dangling_nics %}
      mv "/etc/netplan/enp{{ nic.nic_bus }}s0-netcfg.yaml" "/etc/netplan/enp{{ nic.nic_bus }}s0-netcfg.yaml.bak"
      {% endfor %}

      if ! netplan apply; then
        echo "NETPLAN_APPLY_FAILED"
        echo "Rolling back previous configuration..."
        {% for nic in vm_diff.output.dangling_nics %}
        mv "/etc/netplan/enp{{ nic.nic_bus }}s0-netcfg.yaml.bak" "/etc/netplan/enp{{ nic.nic_bus }}s0-netcfg.yaml"
        {% endfor %}
        exit 1
      else
        {% for nic in vm_diff.output.dangling_nics %}
        rm "/etc/netplan/enp{{ nic.nic_bus }}s0-netcfg.yaml.bak"
        {% endfor %}
      fi
    timeout: 20
    poll: !!float "0.1"
  register: run_cmd
  failed_when:
    - "'NETPLAN_APPLY_FAILED' in run_cmd.output.stdout | default('')"
  changed_when:
    - "'NETPLAN_APPLY_SUCCESS' in run_cmd.output.stdout | default('')"

- ansible.builtin.include_tasks: ./add_nic.yml
  loop: "{{ vm_diff.output.nics_to_add }}"
  loop_control:
    loop_var: network

- ansible.builtin.include_tasks: ./networks/update_netplan.yml
  loop: "{{ vm.networks }}"
  loop_control:
    loop_var: network
